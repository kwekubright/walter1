var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';
/**
 * @name Clipboard
 * @description
 * Clipboard management plugin for Cordova that supports iOS, Android, and Windows Phone 8.
 *
 *
 * @usage
 * ```typescript
 * import { Clipboard } from '@ionic-native/clipboard';
 *
 * constructor(private clipboard: Clipboard) { }
 *
 * ...
 *
 *
 * this.clipboard.copy('Hello world');
 *
 * this.clipboard.paste().then(
 *    (resolve: string) => {
 *       alert(resolve);
 *     },
 *     (reject: string) => {
 *       alert('Error: ' + reject);
 *     }
 *   );
 *
 * this.clipboard.clear();
 * ```
 */
var Clipboard = (function (_super) {
    __extends(Clipboard, _super);
    function Clipboard() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Copies the given text
     * @param {string} text Text that gets copied on the system clipboard
     * @returns {Promise<any>} Returns a promise after the text has been copied
     */
    /**
       * Copies the given text
       * @param {string} text Text that gets copied on the system clipboard
       * @returns {Promise<any>} Returns a promise after the text has been copied
       */
    Clipboard.prototype.copy = /**
       * Copies the given text
       * @param {string} text Text that gets copied on the system clipboard
       * @returns {Promise<any>} Returns a promise after the text has been copied
       */
    function (text) {
        return;
    };
    /**
     * Pastes the text stored in clipboard
     * @returns {Promise<any>} Returns a promise after the text has been pasted
     */
    /**
       * Pastes the text stored in clipboard
       * @returns {Promise<any>} Returns a promise after the text has been pasted
       */
    Clipboard.prototype.paste = /**
       * Pastes the text stored in clipboard
       * @returns {Promise<any>} Returns a promise after the text has been pasted
       */
    function () {
        return;
    };
    /**
     * Clear the text stored in clipboard
     * @returns {Promise<any>} Returns a promise after the text has been cleaned
     */
    /**
       * Clear the text stored in clipboard
       * @returns {Promise<any>} Returns a promise after the text has been cleaned
       */
    Clipboard.prototype.clear = /**
       * Clear the text stored in clipboard
       * @returns {Promise<any>} Returns a promise after the text has been cleaned
       */
    function () {
        return;
    };
    Clipboard.decorators = [
        { type: Injectable },
    ];
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], Clipboard.prototype, "copy", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], Clipboard.prototype, "paste", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], Clipboard.prototype, "clear", null);
    /**
     * @name Clipboard
     * @description
     * Clipboard management plugin for Cordova that supports iOS, Android, and Windows Phone 8.
     *
     *
     * @usage
     * ```typescript
     * import { Clipboard } from '@ionic-native/clipboard';
     *
     * constructor(private clipboard: Clipboard) { }
     *
     * ...
     *
     *
     * this.clipboard.copy('Hello world');
     *
     * this.clipboard.paste().then(
     *    (resolve: string) => {
     *       alert(resolve);
     *     },
     *     (reject: string) => {
     *       alert('Error: ' + reject);
     *     }
     *   );
     *
     * this.clipboard.clear();
     * ```
     */
    Clipboard = __decorate([
        Plugin({
            pluginName: 'Clipboard',
            plugin: 'cordova-clipboard',
            pluginRef: 'cordova.plugins.clipboard',
            repo: 'https://github.com/ihadeed/cordova-clipboard',
            platforms: ['Android', 'iOS', 'Windows Phone 8']
        })
    ], Clipboard);
    return Clipboard;
}(IonicNativePlugin));
export { Clipboard };
//# sourceMappingURL=index.js.map