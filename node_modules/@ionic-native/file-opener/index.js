var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';
/**
 * @name File Opener
 * @description
 * This plugin will open a file on your device file system with its default application.
 *
 * @usage
 * ```typescript
 * import { FileOpener } from '@ionic-native/file-opener';
 *
 * constructor(private fileOpener: FileOpener) { }
 *
 * ...
 *
 * this.fileOpener.open('path/to/file.pdf', 'application/pdf')
 *   .then(() => console.log('File is opened'))
 *   .catch(e => console.log('Error opening file', e));
 *
 * ```
 */
var FileOpener = (function (_super) {
    __extends(FileOpener, _super);
    function FileOpener() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Open an file
     * @param {string} filePath File Path
     * @param {string} fileMIMEType File MIME Type
     * @returns {Promise<any>}
     */
    /**
       * Open an file
       * @param {string} filePath File Path
       * @param {string} fileMIMEType File MIME Type
       * @returns {Promise<any>}
       */
    FileOpener.prototype.open = /**
       * Open an file
       * @param {string} filePath File Path
       * @param {string} fileMIMEType File MIME Type
       * @returns {Promise<any>}
       */
    function (filePath, fileMIMEType) {
        return;
    };
    /**
     * Uninstalls a package
     * @param {string} packageId Package ID
     * @returns {Promise<any>}
     */
    /**
       * Uninstalls a package
       * @param {string} packageId Package ID
       * @returns {Promise<any>}
       */
    FileOpener.prototype.uninstall = /**
       * Uninstalls a package
       * @param {string} packageId Package ID
       * @returns {Promise<any>}
       */
    function (packageId) {
        return;
    };
    /**
     * Check if an app is already installed
     * @param {string} packageId Package ID
     * @returns {Promise<any>}
     */
    /**
       * Check if an app is already installed
       * @param {string} packageId Package ID
       * @returns {Promise<any>}
       */
    FileOpener.prototype.appIsInstalled = /**
       * Check if an app is already installed
       * @param {string} packageId Package ID
       * @returns {Promise<any>}
       */
    function (packageId) {
        return;
    };
    FileOpener.decorators = [
        { type: Injectable },
    ];
    __decorate([
        Cordova({
            callbackStyle: 'object',
            successName: 'success',
            errorName: 'error'
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String]),
        __metadata("design:returntype", Promise)
    ], FileOpener.prototype, "open", null);
    __decorate([
        Cordova({
            callbackStyle: 'object',
            successName: 'success',
            errorName: 'error'
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], FileOpener.prototype, "uninstall", null);
    __decorate([
        Cordova({
            callbackStyle: 'object',
            successName: 'success',
            errorName: 'error'
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], FileOpener.prototype, "appIsInstalled", null);
    /**
     * @name File Opener
     * @description
     * This plugin will open a file on your device file system with its default application.
     *
     * @usage
     * ```typescript
     * import { FileOpener } from '@ionic-native/file-opener';
     *
     * constructor(private fileOpener: FileOpener) { }
     *
     * ...
     *
     * this.fileOpener.open('path/to/file.pdf', 'application/pdf')
     *   .then(() => console.log('File is opened'))
     *   .catch(e => console.log('Error opening file', e));
     *
     * ```
     */
    FileOpener = __decorate([
        Plugin({
            pluginName: 'FileOpener',
            plugin: 'cordova-plugin-file-opener2',
            pluginRef: 'cordova.plugins.fileOpener2',
            repo: 'https://github.com/pwlin/cordova-plugin-file-opener2',
            platforms: ['Android', 'iOS', 'Windows', 'Windows Phone 8']
        })
    ], FileOpener);
    return FileOpener;
}(IonicNativePlugin));
export { FileOpener };
//# sourceMappingURL=index.js.map