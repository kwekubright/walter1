{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/screen-orientation/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EACL,OAAO,EACP,eAAe,EACf,iBAAiB,EACjB,MAAM,EACP,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0DN,qCAAiB;;;;;;6BAIvC;YACb,gBAAgB,EAAE,kBAAkB;YACpC,kBAAkB,EAAE,oBAAoB;YACxC,iBAAiB,EAAE,mBAAmB;YACtC,mBAAmB,EAAE,qBAAqB;YAC1C,QAAQ,EAAE,UAAU;YACpB,SAAS,EAAE,WAAW;YACtB,GAAG,EAAE,KAAK;SACX;;;IAED;;;OAGG;;;;;IAKH,oCAAQ;;;;;QACN,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,gCAAI;;;;;;cAAC,WAAmB;QACtB,MAAM,CAAC;KACR;IAED;;OAEG;;;;IAEH,kCAAM;;;mBAAW;;gBA1ClB,UAAU;;;QAmBR,OAAO,CAAC;YACP,eAAe,EAAE,IAAI;YACrB,KAAK,EAAE,mBAAmB;SAC3B,CAAC;;;wCACU,UAAU;qDAErB;;QAQA,OAAO,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;;;;iDAG/B;;QAKA,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;mDACP;;QAKhB,eAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA9CL,iBAAiB;QAR7B,MAAM,CAAC;YACN,UAAU,EAAE,mBAAmB;YAC/B,MAAM,EAAE,mCAAmC;YAC3C,SAAS,EAAE,oBAAoB;YAC/B,IAAI,EAAE,6DAA6D;YACnE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACzC,CAAC;OAEW,iBAAiB,EAgD7B;4BAjHD;EAiEuC,iBAAiB;SAA3C,iBAAiB","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Cordova,\n  CordovaProperty,\n  IonicNativePlugin,\n  Plugin\n} from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * @name Screen Orientation\n * @description\n * Cordova plugin to set/lock the screen orientation in a common way.\n *\n * Requires Cordova plugin: `cordova-plugin-screen-orientation`. For more info, please see the [Screen Orientation plugin docs](https://github.com/apache/cordova-plugin-screen-orientation).\n *\n * @usage\n * ```typescript\n * import { ScreenOrientation } from '@ionic-native/screen-orientation';\n *\n * constructor(private screenOrientation: ScreenOrientation) { }\n *\n * ...\n *\n *\n * // get current\n * console.log(this.screenOrientation.type); // logs the current orientation, example: 'landscape'\n *\n * // set to landscape\n * this.screenOrientation.lock(this.screenOrientation.ORIENTATIONS.LANDSCAPE);\n *\n * // allow user rotate\n * this.screenOrientation.unlock();\n *\n * // detect orientation changes\n * this.screenOrientation.onChange().subscribe(\n *    () => {\n *        console.log(\"Orientation Changed\");\n *    }\n * );\n *\n * ```\n *\n * @advanced\n *\n * Accepted orientation values:\n *\n * | Value                         | Description                                                                  |\n * |-------------------------------|------------------------------------------------------------------------------|\n * | portrait-primary              | The orientation is in the primary portrait mode.                             |\n * | portrait-secondary            | The orientation is in the secondary portrait mode.                           |\n * | landscape-primary             | The orientation is in the primary landscape mode.                            |\n * | landscape-secondary           | The orientation is in the secondary landscape mode.                          |\n * | portrait                      | The orientation is either portrait-primary or portrait-secondary (sensor).   |\n * | landscape                     | The orientation is either landscape-primary or landscape-secondary (sensor). |\n *\n */\n@Plugin({\n  pluginName: 'ScreenOrientation',\n  plugin: 'cordova-plugin-screen-orientation',\n  pluginRef: 'screen.orientation',\n  repo: 'https://github.com/apache/cordova-plugin-screen-orientation',\n  platforms: ['Android', 'iOS', 'Windows']\n})\n@Injectable()\nexport class ScreenOrientation extends IonicNativePlugin {\n  /**\n   * Convenience enum for possible orientations\n   */\n  ORIENTATIONS = {\n    PORTRAIT_PRIMARY: 'portrait-primary',\n    PORTRAIT_SECONDARY: 'portrait-secondary',\n    LANDSCAPE_PRIMARY: 'landscape-primary',\n    LANDSCAPE_SECONDARY: 'landscape-secondary',\n    PORTRAIT: 'portrait',\n    LANDSCAPE: 'landscape',\n    ANY: 'any'\n  };\n\n  /**\n   * Listen to orientation change event\n   * @return {Observable<void>}\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'orientationchange'\n  })\n  onChange(): Observable<void> {\n    return;\n  }\n\n  /**\n   * Lock the orientation to the passed value.\n   * See below for accepted values\n   * @param orientation {string} The orientation which should be locked. Accepted values see table above.\n   * @return {Promise<any>}\n   */\n  @Cordova({ otherPromise: true })\n  lock(orientation: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Unlock and allow all orientations.\n   */\n  @Cordova({ sync: true })\n  unlock(): void {}\n\n  /**\n   * Get the current orientation of the device.\n   */\n  @CordovaProperty\n  type: string;\n}\n"]}