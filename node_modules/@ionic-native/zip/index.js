var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';
/**
 * @name Zip
 * @description
 * A Cordova plugin to unzip files in Android and iOS.
 *
 * @usage
 * ```typescript
 * import { Zip } from '@ionic-native/zip';
 *
 * constructor(private zip: Zip) { }
 *
 * ...
 *
 * this.zip.unzip('path/to/source.zip', 'path/to/dest', (progress) => console.log('Unzipping, ' + Math.round((progress.loaded / progress.total) * 100) + '%'))
 *  .then((result) => {
 *    if(result === 0) console.log('SUCCESS');
 *    if(result === -1) console.log('FAILED');
 *  });
 *
 * ```
 */
var Zip = (function (_super) {
    __extends(Zip, _super);
    function Zip() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Extracts files from a ZIP archive
     * @param sourceZip {string} Source ZIP file
     * @param destUrl {string} Destination folder
     * @param onProgress {Function} optional callback to be called on progress update
     * @returns {Promise<number>} returns a promise that resolves with a number. 0 is success, -1 is error
     */
    /**
       * Extracts files from a ZIP archive
       * @param sourceZip {string} Source ZIP file
       * @param destUrl {string} Destination folder
       * @param onProgress {Function} optional callback to be called on progress update
       * @returns {Promise<number>} returns a promise that resolves with a number. 0 is success, -1 is error
       */
    Zip.prototype.unzip = /**
       * Extracts files from a ZIP archive
       * @param sourceZip {string} Source ZIP file
       * @param destUrl {string} Destination folder
       * @param onProgress {Function} optional callback to be called on progress update
       * @returns {Promise<number>} returns a promise that resolves with a number. 0 is success, -1 is error
       */
    function (sourceZip, destUrl, onProgress) { return; };
    Zip.decorators = [
        { type: Injectable },
    ];
    __decorate([
        Cordova({
            successIndex: 2,
            errorIndex: 4
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String, Function]),
        __metadata("design:returntype", Promise)
    ], Zip.prototype, "unzip", null);
    /**
     * @name Zip
     * @description
     * A Cordova plugin to unzip files in Android and iOS.
     *
     * @usage
     * ```typescript
     * import { Zip } from '@ionic-native/zip';
     *
     * constructor(private zip: Zip) { }
     *
     * ...
     *
     * this.zip.unzip('path/to/source.zip', 'path/to/dest', (progress) => console.log('Unzipping, ' + Math.round((progress.loaded / progress.total) * 100) + '%'))
     *  .then((result) => {
     *    if(result === 0) console.log('SUCCESS');
     *    if(result === -1) console.log('FAILED');
     *  });
     *
     * ```
     */
    Zip = __decorate([
        Plugin({
            pluginName: 'Zip',
            plugin: 'cordova-plugin-zip',
            pluginRef: 'zip',
            repo: 'https://github.com/MobileChromeApps/cordova-plugin-zip',
            platforms: ['Android', 'iOS']
        })
    ], Zip);
    return Zip;
}(IonicNativePlugin));
export { Zip };
//# sourceMappingURL=index.js.map