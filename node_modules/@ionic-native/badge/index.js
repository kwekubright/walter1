var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';
/**
 * @name Badge
 * @description
 * The essential purpose of badge numbers is to enable an application to inform its users that it has something for them — for example, unread messages — when the application isn’t running in the foreground.
 *
 * Requires Cordova plugin: cordova-plugin-badge. For more info, please see the [Badge plugin docs](https://github.com/katzer/cordova-plugin-badge).
 *
 * @usage
 * ```typescript
 * import { Badge } from '@ionic-native/badge';
 *
 * constructor(private badge: Badge) { }
 *
 * ...
 *
 * this.badge.set(10);
 * this.badge.increase(1);
 * this.badge.clear();
 * ```
 */
var Badge = (function (_super) {
    __extends(Badge, _super);
    function Badge() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Clear the badge of the app icon.
     * @returns {Promise<boolean>}
     */
    /**
       * Clear the badge of the app icon.
       * @returns {Promise<boolean>}
       */
    Badge.prototype.clear = /**
       * Clear the badge of the app icon.
       * @returns {Promise<boolean>}
       */
    function () {
        return;
    };
    /**
     * Set the badge of the app icon.
     * @param {number} badgeNumber  The new badge number.
     * @returns {Promise<any>}
     */
    /**
       * Set the badge of the app icon.
       * @param {number} badgeNumber  The new badge number.
       * @returns {Promise<any>}
       */
    Badge.prototype.set = /**
       * Set the badge of the app icon.
       * @param {number} badgeNumber  The new badge number.
       * @returns {Promise<any>}
       */
    function (badgeNumber) {
        return;
    };
    /**
     * Get the badge of the app icon.
     * @returns {Promise<any>}
     */
    /**
       * Get the badge of the app icon.
       * @returns {Promise<any>}
       */
    Badge.prototype.get = /**
       * Get the badge of the app icon.
       * @returns {Promise<any>}
       */
    function () {
        return;
    };
    /**
     * Increase the badge number.
     * @param {number} increaseBy  Count to add to the current badge number
     * @returns {Promise<any>}
     */
    /**
       * Increase the badge number.
       * @param {number} increaseBy  Count to add to the current badge number
       * @returns {Promise<any>}
       */
    Badge.prototype.increase = /**
       * Increase the badge number.
       * @param {number} increaseBy  Count to add to the current badge number
       * @returns {Promise<any>}
       */
    function (increaseBy) {
        return;
    };
    /**
     * Decrease the badge number.
     * @param {number} decreaseBy  Count to subtract from the current badge number
     * @returns {Promise<any>}
     */
    /**
       * Decrease the badge number.
       * @param {number} decreaseBy  Count to subtract from the current badge number
       * @returns {Promise<any>}
       */
    Badge.prototype.decrease = /**
       * Decrease the badge number.
       * @param {number} decreaseBy  Count to subtract from the current badge number
       * @returns {Promise<any>}
       */
    function (decreaseBy) {
        return;
    };
    /**
     * Check support to show badges.
     * @returns {Promise<any>}
     */
    /**
       * Check support to show badges.
       * @returns {Promise<any>}
       */
    Badge.prototype.isSupported = /**
       * Check support to show badges.
       * @returns {Promise<any>}
       */
    function () {
        return;
    };
    /**
     * Determine if the app has permission to show badges.
     * @returns {Promise<any>}
     */
    /**
       * Determine if the app has permission to show badges.
       * @returns {Promise<any>}
       */
    Badge.prototype.hasPermission = /**
       * Determine if the app has permission to show badges.
       * @returns {Promise<any>}
       */
    function () {
        return;
    };
    /**
     * Register permission to set badge notifications
     * @returns {Promise<any>}
     */
    /**
       * Register permission to set badge notifications
       * @returns {Promise<any>}
       */
    Badge.prototype.requestPermission = /**
       * Register permission to set badge notifications
       * @returns {Promise<any>}
       */
    function () {
        return;
    };
    Badge.decorators = [
        { type: Injectable },
    ];
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], Badge.prototype, "clear", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", Promise)
    ], Badge.prototype, "set", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], Badge.prototype, "get", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", Promise)
    ], Badge.prototype, "increase", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number]),
        __metadata("design:returntype", Promise)
    ], Badge.prototype, "decrease", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], Badge.prototype, "isSupported", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], Badge.prototype, "hasPermission", null);
    __decorate([
        Cordova(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], Badge.prototype, "requestPermission", null);
    /**
     * @name Badge
     * @description
     * The essential purpose of badge numbers is to enable an application to inform its users that it has something for them — for example, unread messages — when the application isn’t running in the foreground.
     *
     * Requires Cordova plugin: cordova-plugin-badge. For more info, please see the [Badge plugin docs](https://github.com/katzer/cordova-plugin-badge).
     *
     * @usage
     * ```typescript
     * import { Badge } from '@ionic-native/badge';
     *
     * constructor(private badge: Badge) { }
     *
     * ...
     *
     * this.badge.set(10);
     * this.badge.increase(1);
     * this.badge.clear();
     * ```
     */
    Badge = __decorate([
        Plugin({
            pluginName: 'Badge',
            plugin: 'cordova-plugin-badge',
            pluginRef: 'cordova.plugins.notification.badge',
            repo: 'https://github.com/katzer/cordova-plugin-badge',
            platforms: ['Android', 'Browser', 'iOS', 'Windows']
        })
    ], Badge);
    return Badge;
}(IonicNativePlugin));
export { Badge };
//# sourceMappingURL=index.js.map