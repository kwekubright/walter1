{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/local-notifications/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport enum ELocalNotificationTriggerUnit {\n  SECOND = 'second',\n  MINUTE = 'minute',\n  HOUR = 'hour',\n  DAY = 'day',\n  WEEK = 'week',\n  MONTH = 'month',\n  QUARTER = 'quarter',\n  YEAR = 'year',\n  WEEKDAY = 'weekday',\n  WEEKDAY_ORDINAL = 'weekdayOrdinal',\n  WEEK_OF_MONTH = 'weekOfMonth'\n}\n\nexport interface ILocalNotificationTrigger {\n  /** ***** FIX ***** */\n\n  /**\n   * The date and time when the system should deliver the local notification. If the specified value is nil or is a date in the past, the local notification is delivered immediately.\n   * Default: now ~ new Date()\n   */\n  at?: Date;\n\n  /** ***** TIMESPAN ***** */\n\n  /**\n   * Amount of units\n   */\n  in?: number;\n\n  /**\n   * Unit\n   */\n  unit?: ELocalNotificationTriggerUnit;\n\n  /** ***** REPEAT/MATCH ***** */\n\n  /**\n   * Amount of units\n   */\n  count?: number;\n\n  /**\n   * The unit\n   */\n  every?: ELocalNotificationTriggerUnit;\n\n  /**\n   * The end of the repeating notification\n   */\n  before?: Date;\n\n  /**\n   * The date and time when the system should deliver the local notification. If the specified value is nil or is a date in the past, the local notification is delivered immediately.\n   * Only for \"repeat\"\n   * Default: now ~ new Date()\n   */\n  firstAt?: Date;\n\n  /**\n   * Only for \"match\"\n   */\n  after?: Date;\n\n  /** ***** LOCATION ***** */\n\n  /**\n   * IOS ONLY\n   * Center of the location\n   * Latitude and Longitude values\n   */\n  center?: number[];\n\n  /**\n   * IOS ONLY\n   * Radius in meters\n   */\n  radius?: number;\n\n  /**\n   * IOS ONLY\n   * Trigger on entry of the location\n   */\n  notifyOnEntry?: boolean;\n\n  /**\n   * IOS ONLY\n   * Trigger on exit of the location\n   */\n  notifyOnExit?: boolean;\n\n  /**\n   * IOS ONLY\n   * Trigger only once?\n   */\n  single?: boolean;\n}\n\nexport enum ILocalNotificationActionType {\n  INPUT = 'input',\n  BUTTON = 'button'\n}\n\n/**\n * Notification action\n *\n * @see https://github.com/katzer/cordova-plugin-local-notifications#actions\n */\nexport interface ILocalNotificationAction {\n  /**\n   * The id of the action is used as the event name in the listener function\n   */\n  id?: string;\n\n  /**\n   * The title of the notification message\n   */\n  title?: string;\n\n  /**\n   * Make this notification show when app in foreground.\n   */\n  foreground?: boolean;\n\n  /**\n   * Specifies whether the action causes the app to launch in the foreground\n   */\n  launch?: boolean;\n\n  /**\n   * If the value is 'decline' the action is displayed with special highlighting to indicate that it performs a destructive task\n   */\n  ui?: string;\n\n  /**\n   * Specifies whether the action requires that the userâ€™s device be unlocked.\n   * When the user selects an action with this option, the system prompts\n   * the user to unlock the device\n   */\n  needsAuth?: boolean;\n\n  /**\n   * The resource path of the action icon\n   */\n  icon?: string;\n\n  /**\n   * ANDROID ONLY\n   * An array of pre-defined choices for users input\n   */\n  choices?: string[];\n\n  /**\n   * ANDROID ONLY\n   * Specifies whether the user can provide arbitrary text values\n   */\n  editable?: boolean;\n\n  /**\n   * IOS ONLY\n   * The title of the text input button that is displayed to the user.\n   */\n  submitTitle?: string;\n\n  /**\n   * The type of the action. If omitted 'button' is used.\n   */\n  type?: ILocalNotificationActionType;\n}\n\nexport interface ILocalNotificationProgressBar {\n  /**\n   * Is the progress bar enabled?\n   */\n  enabled?: boolean;\n\n  /**\n   * The current value\n   */\n  value?: number;\n\n  /**\n   * ANDROID ONLY\n   * The maximum value (default is 100)\n   */\n  maxValue?: number;\n\n  /**\n   * ANDROID ONLY\n   * Show an indeterminate progress bar\n   */\n  indeterminate?: boolean;\n\n  /**\n   * WINDOWS ONLY\n   * Gets or sets an optional string to be displayed instead of the\n   * default percentage string. If this isn't provided, something\n   * like \"70%\" will be displayed.\n   */\n  description?: string;\n\n  /**\n   * WINDOWS ONLY\n   * Sets the status (required), which is displayed underneath the progress bar\n   * on the left.\n   * This string should reflect the status of the operation,\n   * like \"Downloading...\" or \"Installing...\"\n   */\n  status?: string;\n}\n\nexport interface ILocalNotification {\n  /**\n   * A unique identifier required to clear, cancel, update or retrieve the local notification in the future\n   * Default: 0\n   */\n  id?: number;\n\n  /**\n   * First row of the notification\n   * Default: Empty string (iOS) or the app name (Android)\n   */\n  title?: string;\n\n  /**\n   * Second row of the notification\n   * Default: Empty string\n   */\n  text?: string | string[];\n\n  /**\n   * The number currently set as the badge of the app icon in Springboard (iOS) or at the right-hand side of the local notification (Android)\n   * Default: 0 (which means don't show a number)\n   */\n  badge?: number;\n\n  /**\n   * Uri of the file containing the sound to play when an alert is displayed\n   * Default: res://platform_default\n   */\n  sound?: string;\n\n  /**\n   * Arbitrary data, objects will be encoded to JSON string\n   * Default: null\n   */\n  data?: any;\n\n  /**\n   * ANDROID ONLY\n   * Uri of the icon that is shown in the ticker and notification\n   * Default: res://icon\n   */\n  icon?: string;\n\n  /**\n   * ANDROID ONLY\n   * Uri of the resource (only res://) to use in the notification layouts. Different classes of devices may return different sizes\n   * Default: res://ic_popup_reminder\n   */\n  smallIcon?: string;\n\n  /**\n   * ANDROID ONLY\n   * RGB value for the background color of the smallIcon.\n   * Default: Androids COLOR_DEFAULT, which will vary based on Android version.\n   */\n  color?: string;\n\n  /**\n   * ANDROID ONLY\n   * Use the default notification vibrate.\n   */\n  vibrate?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * Define the blinking of the LED on the device.\n   * If set to true, the LED will blink in the default color with\n   * timings for on and off set to 1000 ms.\n   * If set to a string, the LED will blink in this ARGB value with\n   * timings for on and off set to 1000 ms.\n   * If set to an array, the value of the key 0 will be used as the color,\n   * the value of the key 1 will be used as the 'on' timing, the value of\n   * the key 2 will be used as the 'off' timing\n   */\n  led?: { color: string; on: number; off: number } | any[] | boolean | string;\n\n  /**\n   * Notification priority.\n   * Integers between -2 and 2, whereas -2 is minimum and 2 is maximum priority\n   */\n  priority?: number;\n\n  /**\n   * Is a silent notification\n   */\n  silent?: boolean;\n\n  /**\n   * Specifies whether the a click on the notification causes the app\n   * to launch in the foreground\n   */\n  launch?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * Wakeup the device. (default is true)\n   */\n  wakeup?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled.\n   */\n  timeoutAfter?: number | false;\n\n  /**\n   * Actions id or actions\n   */\n  actions?: string | ILocalNotificationAction[];\n\n  /**\n   * When to trigger the notification\n   */\n  trigger?: ILocalNotificationTrigger;\n\n  /**\n   * A list of image attachments\n   */\n  attachments?: string[];\n\n  /**\n   * ANDROID ONLY\n   * If and how the notification shall show the when date.\n   * Possbile values:\n   *                  boolean: true equals 'clock', false disable a watch/counter\n   *                  'clock': Show the when date in the content view\n   *                  'chronometer': Show a stopwatch\n   *\n   */\n  clock?: boolean | string;\n\n  /**\n   * Shows a progress bar\n   * Setting a boolean is a shortcut for {enabled: true/false} respectively\n   */\n  progressBar?: ILocalNotificationProgressBar | boolean;\n\n  /**\n   * ANDROID ONLY\n   * If multiple notifications have the same group your app can present\n   * them as a single group.\n   */\n  group?: string;\n\n  /**\n   * ANDROID ONLY\n   * If set to 'true' this notification could use 'summary' to summarize\n   * the contents of the whole group\n   */\n  groupSummary?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * Summary of the whole notification group. Should be used in conjuntion\n   * with 'groupSummary' set to true\n   */\n  summary?: string;\n\n  /**\n   * ANDROID ONLY\n   * Sets the number of items this notification represents.\n   */\n  number?: number;\n\n  /**\n   * ANDROID ONLY\n   * Set whether this is an \"ongoing\" notification.\n   * Ongoing notifications cannot be dismissed by the user,\n   * so your application or service must take care of canceling them.\n   */\n  sticky?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * Make this notification automatically dismissed when the user touches it.\n   */\n  autoClear?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * If set to true the notification will be show in its entirety on all lockscreens.\n   * If set to false it will not be revealed on a secure lockscreen.\n   */\n  lockscreen?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * Set the default notification options that will be used.\n   * The value should be one or more of the following fields combined with\n   * bitwise-or: DEFAULT_SOUND, DEFAULT_VIBRATE, DEFAULT_LIGHTS.\n   */\n  defaults?: number;\n\n  /**\n   * ANDROID ONLY\n   * Specifies the channel the notification should be delivered on.\n   */\n  channel?: string;\n\n  /**\n   * ANDROID ONLY\n   * Set the token for the media session\n   */\n  mediaSession?: string;\n\n  /**\n   * Make this notification show when app in foreground.\n   */\n  foreground?: boolean;\n}\n\n/**\n * @name Local Notifications\n * @description\n * This plugin allows you to display local notifications on the device\n *\n * @usage\n * ```typescript\n * import { LocalNotifications } from '@ionic-native/local-notifications';\n *\n *\n * constructor(private localNotifications: LocalNotifications) { }\n *\n * ...\n *\n *\n * // Schedule a single notification\n * this.localNotifications.schedule({\n *   id: 1,\n *   text: 'Single ILocalNotification',\n *   sound: isAndroid? 'file://sound.mp3': 'file://beep.caf',\n *   data: { secret: key }\n * });\n *\n *\n * // Schedule multiple notifications\n * this.localNotifications.schedule([{\n *    id: 1,\n *    text: 'Multi ILocalNotification 1',\n *    sound: isAndroid ? 'file://sound.mp3': 'file://beep.caf',\n *    data: { secret:key }\n *   },{\n *    id: 2,\n *    title: 'Local ILocalNotification Example',\n *    text: 'Multi ILocalNotification 2',\n *    icon: 'http://example.com/icon.png'\n * }]);\n *\n *\n * // Schedule delayed notification\n * this.localNotifications.schedule({\n *    text: 'Delayed ILocalNotification',\n *    trigger: {at: new Date(new Date().getTime() + 3600)},\n *    led: 'FF0000',\n *    sound: null\n * });\n * ```\n * @interfaces\n * ILocalNotification\n */\n@Plugin({\n  pluginName: 'LocalNotifications',\n  plugin: 'cordova-plugin-local-notification',\n  pluginRef: 'cordova.plugins.notification.local',\n  repo: 'https://github.com/katzer/cordova-plugin-local-notifications',\n  platforms: ['Android', 'iOS', 'Windows']\n})\n@Injectable()\nexport class LocalNotifications extends IonicNativePlugin {\n  /**\n   * Informs if the app has the permission to show notifications.\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  hasPermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Request permission to show notifications if not already granted.\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  requestPermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Schedules a single or multiple notifications\n   * @param options {Notification | Array<ILocalNotification>} optional\n   */\n  @Cordova({\n    sync: true\n  })\n  schedule(options?: ILocalNotification | ILocalNotification[]): void {}\n\n  /**\n   * Updates a previously scheduled notification. Must include the id in the options parameter.\n   * @param options {ILocalNotification} optional\n   */\n  @Cordova({\n    sync: true\n  })\n  update(options?: ILocalNotification): void {}\n\n  /**\n   * Clears single or multiple notifications\n   * @param notificationId {any} A single notification id, or an array of notification ids.\n   * @returns {Promise<any>} Returns a promise when the notification had been cleared\n   */\n  @Cordova()\n  clear(notificationId: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Clears all notifications\n   * @returns {Promise<any>} Returns a promise when all notifications have cleared\n   */\n  @Cordova()\n  clearAll(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Cancels single or multiple notifications\n   * @param notificationId {any} A single notification id, or an array of notification ids.\n   * @returns {Promise<any>} Returns a promise when the notification is canceled\n   */\n  @Cordova()\n  cancel(notificationId: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Cancels all notifications\n   * @returns {Promise<any>} Returns a promise when all notifications are canceled\n   */\n  @Cordova()\n  cancelAll(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Checks presence of a notification\n   * @param notificationId {number}\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isPresent(notificationId: number): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Checks is a notification is scheduled\n   * @param notificationId {number}\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isScheduled(notificationId: number): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Checks if a notification is triggered\n   * @param notificationId {number}\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isTriggered(notificationId: number): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Check if a notification has a given type.\n   * @param {number} id The ID of the notification.\n   * @param {string} type  The type of the notification.\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  hasType(id: number, type: string): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Get the type (triggered, scheduled) for the notification.\n   * @param {number} id The ID of the notification.\n   */\n  @Cordova()\n  getType(id: number): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Get all the notification ids\n   * @returns {Promise<Array<number>>}\n   */\n  @Cordova()\n  getIds(): Promise<number[]> {\n    return;\n  }\n\n  /**\n   * Get the ids of scheduled notifications\n   * @returns {Promise<Array<number>>} Returns a promise\n   */\n  @Cordova()\n  getScheduledIds(): Promise<number[]> {\n    return;\n  }\n\n  /**\n   * Get the ids of triggered notifications\n   * @returns {Promise<Array<number>>}\n   */\n  @Cordova()\n  getTriggeredIds(): Promise<number[]> {\n    return;\n  }\n\n  /**\n   * Get a notification object\n   * @param notificationId {any} The id of the notification to get\n   * @returns {Promise<ILocalNotification>}\n   */\n  @Cordova()\n  get(notificationId: any): Promise<ILocalNotification> {\n    return;\n  }\n\n  /**\n   * Get all notification objects\n   * @returns {Promise<Array<ILocalNotification>>}\n   */\n  @Cordova()\n  getAll(): Promise<ILocalNotification[]> {\n    return;\n  }\n\n  /**\n   * Adds a group of actions\n   * @param groupId The id of the action group\n   * @param actions The actions of this group\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  addActions(groupId: any, actions: ILocalNotificationAction[]): Promise<any> {\n    return;\n  }\n\n  /**\n   * Removes a group of actions\n   * @param groupId The id of the action group\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  removeActions(groupId: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Checks if a group of actions is defined\n   * @param groupId The id of the action group\n   * @returns {Promise<boolean>} Whether the group is defined\n   */\n  @Cordova()\n  hasActions(groupId: any): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Gets the (platform specific) default settings.\n   * @returns {Promise<any>} An object with all default settings\n   */\n  @Cordova({\n    sync: true\n  })\n  getDefaults(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Overwrites the (platform specific) default settings.\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    sync: true\n  })\n  setDefaults(defaults: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * List of all scheduled notifications\n   * @returns {Promise<Array<ILocalNotification>>}\n   */\n  @Cordova()\n  getScheduled(): Promise<ILocalNotification[]> {\n    return;\n  }\n\n  /**\n   * List of all triggered notifications\n   * @returns {Promise<Array<ILocalNotification>>}\n   */\n  @Cordova()\n  getTriggered(): Promise<ILocalNotification[]> {\n    return;\n  }\n\n  /**\n   * Sets a callback for a specific event\n   * @param eventName {string} The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall. Custom event names are possible for actions\n   * @return {Observable}\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'un',\n    clearWithArgs: true\n  })\n  on(eventName: string): Observable<any> {\n    return;\n  }\n\n  /**\n   * Not an official interface, however its possible to manually fire events.\n   * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall. Custom event names are possible for actions\n   * @param args Optional arguments\n   */\n  @Cordova({\n    sync: true\n  })\n  fireEvent(eventName: string, args: any): void {}\n\n  /**\n   * Fire queued events once the device is ready and all listeners are registered.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  fireQueuedEvents(): Promise<any> {\n    return;\n  }\n}\n"]}